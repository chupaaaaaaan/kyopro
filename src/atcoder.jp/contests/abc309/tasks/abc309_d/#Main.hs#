{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE UndecidableInstances #-}

import Control.Monad
import Control.Monad.ST
import Control.Monad.State.Strict
import Data.Array.IArray
import Data.Array.ST
import Data.Bits
import Data.ByteString.Char8 (ByteString)
import qualified Data.ByteString.Char8 as BS
import Data.Char
import qualified Data.List as L
import Data.Maybe
import Data.STRef
import qualified Data.Sequence as Seq
import qualified Data.Set as S
import Data.Vector (Vector)
import qualified Data.Vector as V
import Data.Vector.Algorithms.Intro
import Data.Vector.Mutable (MVector)
import qualified Data.Vector.Mutable as VM

import Numeric

type Vertex = Int
type Graph a = Vector [(Vertex, a)]

genGraph :: Vector (Vertex, Vertex, a) -> Int -> Graph a
genGraph vec n = V.create $ do
    g <- VM.replicate n []
    let l = V.length vec
    forM_ [0 .. l -1] $ \i -> do
        let (from, to, w) = vec V.! i
            f = from - 1
            t = to - 1
        VM.modify g ((t, w) :) f
        VM.modify g ((f, w) :) t
    return g

-- グラフ生成（隣接リスト、辺重みなし）
genGraph' :: Vector (Vertex, Vertex) -> Int -> Graph ()
genGraph' = genGraph . V.map (\(x, y) -> (x, y, ()))

-- | execute bfs on graph.
bfs ::
    -- | list of start vertex
    [Int] ->
    -- | adjacency list
    Vector [(Int, a)] ->
    Int
bfs vs graph = V.maximum $ V.create $ do
    -- distance from the vertex of start
    -- '-1' means that the target vertex is not visited
    seen <- VM.replicate (V.length graph) (-1)

    forM_ vs $ flip (VM.write dist) 0
    forM_ vs $ \v -> go dist 0 [v] []

    return dist

  where
    go :: MVector s Int -> Int -> [Int] -> [Int] -> ST s ()
    go dist _ []        []   = return ()
    go dist d []        next = go dist (d+1) next []
    go dist d (cv:rest) next = do
        n <- (\f -> foldM f next (graph V.! cv)) $ \ nl (nv, _) -> do
            d' <- VM.read dist nv
            if d' /= (-1) then return next else do
                VM.write dist nv (d+1)
                return (nv:next)
        go dist d rest n

main :: IO ()
main = do
    [n1, n2, m] <- list1 ucInt

    abv <- toVect <$> list2 m ucInt
    let graph = genGraph' abv (n1 + n2)
        d1 = bfs [0] graph
        d2 = bfs [n1 + n2 -1] graph

    print $ d1 + d2 + 1

-- Input
-- converter
ucChar :: StateT ByteString Maybe Char
ucChar = StateT BS.uncons

ucInt :: StateT ByteString Maybe Int
ucInt = StateT (BS.readInt . BS.dropWhile isSpace)

-- | read a linear data as List
list1 ::
    -- | converter
    StateT ByteString Maybe a ->
    IO [a]
list1 !st = L.unfoldr (runStateT st) <$> BS.getLine

-- | read multi line data as List
list2 ::
    -- | number of lines (height)
    Int ->
    -- | converter
    StateT ByteString Maybe a ->
    IO [[a]]
list2 !n !st = fmap (L.unfoldr (runStateT st)) <$> replicateM n BS.getLine

-- | convert singleton List to Vector
toVec1 :: [[a]] -> Vector a
toVec1 = V.fromList . fmap (\[a] -> a)

-- | read a column Vector of order n whose element is 2-tuple
toVect :: [[a]] -> Vector (a, a)
toVect = V.fromList . fmap (\[a, b] -> (a, b))

{- | read a (h * w) grid data as Array
 We assume that 2d-index starts from (1,1)
-}
grid ::
    -- | number of lines (height)
    Int ->
    -- | number of values per a line (width)
    Int ->
    -- | converter
    StateT ByteString Maybe a ->
    IO (Array (Int, Int) a)
grid h w st = listArray ((1, 1), (h, w)) . concat <$> list2 h st
