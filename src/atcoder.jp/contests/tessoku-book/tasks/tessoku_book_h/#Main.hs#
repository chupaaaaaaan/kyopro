{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE UndecidableInstances #-}

import Control.Monad
import Control.Monad.State.Strict
import Data.ByteString.Char8 (ByteString)
import qualified Data.ByteString.Char8 as BS
import Data.Char
import qualified Data.List as L
import Data.Array.Unboxed
import Data.Array.ST
import Data.Vector (Vector)
import qualified Data.Vector as V

main :: IO ()
main = do
    [h,w] <- list1 ucInt
    mat <- toIntGrid ((0,0),(h,w)) . mk2dCS (+) 0 <$> list2 h ucInt
    q <- readLn @Int
    abcds <- list2 q ucInt

    forM_ abcds $ \[a,b,c,d] -> print $ query2dCS (mat !) (a-1,b-1) (c,d)

-- Input
-- converter
type Conv = StateT ByteString Maybe

ucInt :: Conv Int
ucInt = StateT (BS.readInt . BS.dropWhile isSpace)

-- | read a linear data as List
list1 :: Conv a -> IO [a]
list1 !st = L.unfoldr (runStateT st) <$> BS.getLine

-- | read multi line data as List
list2 :: Int -> Conv a -> IO [[a]]
list2 !n !st = fmap (L.unfoldr (runStateT st)) <$> replicateM n BS.getLine

-- | read a line and convert to Vector
vector1 :: Int -> Conv a -> IO (Vector a)
vector1 n !st = V.unfoldrN n (runStateT st) <$> BS.getLine

toIntGrid :: (Ix a, Ix b) => ((a, b), (a, b)) -> [[Int]] -> UArray (a, b) Int
toIntGrid b = listArray b . L.concat

-- Cumulative Sum
-- | 2次元累積和を計算する。
mk2dCS :: (a -> b -> a) -> a -> [[]] -> [[a]]
mk2dCS f a = L.transpose . fmap (L.scanl' f a) . L.transpose . fmap (L.scanl' f a)

-- | 2次元累積和をクエリする。
query2dCS :: Num c => ((a, b) -> c) -> (a, b) -> (a, b) -> c
query2dCS f (a,b) (c,d) = f (c,d) + f (a,b) - f (a,d) - f (c,b)
